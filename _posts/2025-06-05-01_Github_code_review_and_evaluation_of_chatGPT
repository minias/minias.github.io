---
layout: post
title: Github code review and evaluation of chatGPT
tags: [ai,chatgpt]
---

## 개인적 견해

### 면접관 관점

> 개발 능력을 정량 수치화 할수 있고, 짧은 시간에 검증이 가능해 질수 있습니다.

### 구직자 관점

> AI 발생 이전 시대보다 더 많은 디테일을 요구 받게 되며,코드 품질관리도 신경써야합니다.

## 🔍 분석 대상

- 총 공개 레포지토리 수: 29개

🧠 코드 품질 평가 항목

| 항목                  | 평가    | 설명                                                                                 |
| ------------------- | ------------- | ------------------------------------------------------------------------------------ |
| **1. 코드 일관성**       | ✅ **우수** | 컨벤션을 잘 따르고 있으며, 대부분 프로젝트에서 일관된 코드 스타일(TypeScript의 strict 타입 설정 등)을 유지함.              |
| **2. 폴더/파일 구조**     | ✅ **양호** | 폴더 구조가 기능 단위로 분리되어 있으며, `pages`, `components`, `hooks`, `utils` 등 모듈화를 잘함.           |
| **3. 커밋 메시지**       | ⚠️ **보통** | 많은 커밋 메시지가 한글로 간단히 작성되거나 의미 없는 경우도 일부 존재. 그러나 주요 프로젝트(`run-code-IDE`)는 상세한 로그가 있음.  |
| **4. 문서화 수준**       | ⚠️ **보통** | 대부분의 프로젝트에 `README.md`는 있으나, 사용법/설치법/구조 설명이 부족한 경우가 많음. 주요 프로젝트는 상대적으로 잘 문서화되어 있음.  |
| **5. 테스트 코드 작성**    | ❌ **부족** | 대부분의 레포지토리에 테스트 코드 없음. 단위 테스트나 E2E 테스트에 대한 경험은 부족해 보임.                               |
| **6. 타입 안정성**       | ✅ **우수** | TypeScript를 적극적으로 사용하고 있으며, `interface`, `type`, `enum`을 통해 명확한 타입 선언을 함.            |
| **7. 코드 재사용성**      | ✅ **양호** | 커스텀 훅이나 유틸 함수 분리 등 코드 재사용성 고려되어 있음.                                                  |
| **8. 실용 프로젝트 완성도**  | ✅ **우수** | `my-cafe-webapp`, `run-code-IDE` 등은 실제로 실행 가능한 수준의 앱으로, 상태관리와 라우팅, 비동기 처리까지 구현되어 있음. |
| **9. 최신 기술 사용 여부**  | ✅ **적극적** | React, Next.js, Zustand, Tailwind, Supabase, Firebase 등 최신 프론트엔드 도구 활용이 돋보임.        |
| **10. 코드 주석 및 가독성** | ⚠️ **보통** | 주석은 다소 부족하나, 코드 자체는 읽기 쉽고 함수명/변수명도 명확함.                                             |

📈 종합 평가

| 항목          | 점수 (5점 만점)    |
| ----------- | ------------- |
| 코드 품질 전체 점수 | **4.1 / 5.0** |

평가 요약:

- 실무 수준의 React/TypeScript 프로젝트 경험이 풍부하며, 구조화된 설계와 최신 기술 도입에 능숙함.
- 다만 테스트 코드 작성 및 문서화는 부족한 편이며, 커밋 메시지 스타일이 일관되지 않은 부분이 아쉬움.

✅ 개선 제안

1. 테스트 코드 추가
    → Jest, React Testing Library 등을 활용한 단위/통합 테스트 연습 권장.
1. README 문서 강화
    → 프로젝트 목적, 실행 방법, 기술 스택 등을 명확히 기술하면 이력서/포트폴리오 효과 상승.
1. 커밋 메시지 일관화
    → Conventional Commit 스타일(feat:, fix:, chore: 등)을 사용하는 습관 권장.
